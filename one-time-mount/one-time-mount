#!/bin/bash

if [ "$1" == "--umount" ]; then
    shift
    find $1/enc-mount -uid $(id -u) -a -type f -execdir shred -z -u \{\} \;
    sudo umount $1/enc-mount
    sudo cryptsetup luksClose $(basename $1)
    rmdir $1/enc-mount
    find $1 -uid $(id -u) -a -type f -execdir shred -z -u \{\} \;
    sudo umount $1
    rmdir $1
    exit 0
fi

ramdisk_name=one-time-mount
ramdisk_path=$(mktemp -d one-time-mount.XXX)
ramdisk_size_mb=600
shift
enc_file_path=${ramdisk_path}/.enc-device
enc_file_key_path=${ramdisk_path}/.enc-key
enc_mount_path=${ramdisk_path}/enc-mount
enc_luks_name=$(basename ${ramdisk_path})


mkdir -p $ramdisk_path
if ! grep -q "$ramdisk_name.*$ramdisk_path tmpfs" /proc/mounts ; then
    sudo mount -t tmpfs -o size=${ramdisk_size_mb}M,user ${ramdisk_name} $ramdisk_path
fi

# generate sparse device file for loopback mounting
dd if=/dev/zero of=${enc_file_path} seek=$((ramdisk_size_mb - 50))M count=0 bs=1

# generate key file
dd if=/dev/urandom of=${enc_file_key_path} count=$((4096/512))

# create LUKS volume
sudo cryptsetup -q luksFormat ${enc_file_path} ${enc_file_key_path}
sudo cryptsetup --key-file ${enc_file_key_path} luksOpen ${enc_file_path} ${enc_luks_name}

# throw away the key
shred -z -u ${enc_file_key_path}

sudo mkfs.ext2 -E root_owner=$(id -u):$(id -g) /dev/mapper/${enc_luks_name}

# mount encrypted device
mkdir -p ${enc_mount_path}
sudo mount -o user /dev/mapper/${enc_luks_name} ${enc_mount_path}
